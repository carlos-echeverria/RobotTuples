#!/usr/bin/env python3

# Script that generates 2 groups, each consisting of 24 robot 3-tuples.
# The first group is generated by populating it with random elements from the
# list of all possible combinations of 18 robots in 3-tuples. The second set is
# generated by choosing two random tuples from the first set and swapping its
# elements until two new valid tuples are generated. After a certain number of
# steps we obtain a group which is different enough from the first one.

import robotTuples as rT
import matplotlib.pyplot as plt
from random import seed
from collections import Counter

n = 18 # number of robots
k = 3  # tuple size
groupSize = 24 # number of tuples per group

# creates list of robots:
robots = list(range(1,n+1))

# generates all the possible tuples with the above given parameters:
totalTuples = rT.possibleTuples(robots,k)
totalCombis = len(totalTuples)  # number of available tuples to choose from

print(f"\nWith {n} robots, there are {totalCombis} posible combinations of {k}-tuples.\n\nWe will construct {2} groups of {k}-tuples, each consisting of {groupSize} elements.\n\nEvery robot should appear {4} times in both groups.")

# generates first group by taking random tuples from list of all possible ones:
Group1 = rT.generateGroup(totalTuples, groupSize)

#
CurrentGroup = set(Group1)
print(f"Is the first solution a complete group?: {rT.isGroupComplete(CurrentGroup, n, 4)}")

shuffleTimes = 100
for itr in range(shuffleTimes):
    if (itr%10==0):
        print(f'--{itr}--')
    CurrentGroup = rT.shufflePairOfElements(CurrentGroup, totalTuples)
    ###print('----')
    if itr == shuffleTimes-1:
        #print(f"There were {cntr} shuffles made.")
        print(f"The next found solution is:\n {sorted(CurrentGroup)}.")
        print(f"Is the next found solution a complete group?: {rT.isGroupComplete(CurrentGroup, n, 4)}")


Total =  Group1
for x in CurrentGroup:
    Total.append(x)

count = Counter(Total)
print(f"We have seen {len(count)} tuples from the possible {totalCombis}")

# x axis: one point per key in the Counter (=unique tuple)
x=range(len(count))

# y axis: count for each tuple, sorted by tuple value
y=[count[key] for key in sorted(count)]

# labels for x axis: tuple as strings
xlabels=[str(t) for t in sorted(count)]

# plot
plt.bar(x,y,width=0.6)

# set the labels at the middle of the bars
plt.xticks([x+0.5 for x in x],xlabels, rotation = 'vertical')

# show plot
plt.show()
